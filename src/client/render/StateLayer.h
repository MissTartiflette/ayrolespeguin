// Generated by dia2code
#ifndef RENDER__STATELAYER__H
#define RENDER__STATELAYER__H

#include <vector>
#include <memory>
#include <SFML/Graphics.hpp>
#include <string>

namespace sf {
  class Font;
  class RenderWindow;
};
namespace state {
  class Etat;
};
namespace render {
  class Observateur;
};
namespace state {
  class IObserver;
};
namespace render {
  class TileSet;
  class Surface;
}

#include "Observateur.h"
#include "state/IObserver.h"
#include "state/Etat.h"
#include "TileSet.h"
#include "Surface.h"

namespace render {

  /// class StateLayer - 
  class StateLayer : public render::Observateur, public state::IObserver {
    // Associations
    // Attributes
  protected:
    std::vector<std::unique_ptr<TileSet>> tilesets;
    std::vector<std::unique_ptr<Surface>> surfaces;
    sf::Font police;
    sf::RenderWindow& window;
    // Operations
  public:
    StateLayer (state::Etat& etat, sf::RenderWindow& window);
    std::vector<std::unique_ptr<TileSet>>& getTilesets ();
    std::vector<std::unique_ptr<Surface>>& getSurfaces ();
    void initSurfaces (state::Etat& etat);
    void stateChanged (const state::StateEvent& e, state::Etat& etat);
    void draw (sf::RenderWindow& window);
    void writeTexteAction (const std::string chaine, sf::RenderWindow& window);
    void writeStatistiques (const std::string chaine, sf::RenderWindow& window);
    void gestionCurseur (sf::Event  newEvent, unsigned int largeur_map_cases, unsigned int  longueur_map_cases, state::Etat& etatActuel, bool rollback);
    // Setters and Getters
  };

};

#endif
