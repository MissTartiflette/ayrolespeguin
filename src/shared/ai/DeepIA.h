// Generated by dia2code
#ifndef AI__DEEPIA__H
#define AI__DEEPIA__H

#include <vector>

namespace engine {
  class Action;
  class Moteur;
};
namespace state {
  class Etat;
  class Position;
};
namespace ai {
  class Sommet;
  class IA;
}

#include "state/Position.h"
#include "Sommet.h"
#include "IA.h"
#include "engine/Action.h"

namespace ai {

  /// class DeepIA - 
  class DeepIA : public ai::IA {
    // Associations
    // Attributes
  public:
    int profondeur     = 2;
    bool campChoisi;
    int scoreOptimal     = 0;
    std::vector<engine::Action*> listeCoupsOptimaux;
    std::vector<engine::Action*> listeCoupsSimules;
    int nbActionsJoueurSimulees     = 0;
    // Operations
  public:
    void run (engine::Moteur& moteur);
    int max (engine::Moteur& moteur, int profondeur);
    int min (engine::Moteur& moteur, int profondeur);
    int fonctionEvaluation (engine::Moteur& moteur);
    void findActionsPossibles (state::Etat& etat, bool campChoisi, engine::Moteur& moteur);
    std::vector<state::Position> AlgorithmeA (engine::Moteur& moteur, int i, state::Position posDestination);
    int isPresentSom (std::vector<Sommet> listeSommet, Sommet sommet);
    int isPresentPos (std::vector<Sommet> listeSommet, state::Position position);
    int findIndiceVoisin (engine::Moteur& moteur, int personnage);
    int indiceMinimum (std::vector<int> liste);
    int indiceMaximum (std::vector<int> liste);
    std::vector<state::Position> findRefuge (engine::Moteur& moteur, int personnage);
    std::vector<state::Position> findObjectif (engine::Moteur& moteur, int personnage);
    // Setters and Getters
  };

};

#endif
