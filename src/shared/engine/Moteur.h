// Generated by dia2code
#ifndef ENGINE__MOTEUR__H
#define ENGINE__MOTEUR__H

#include <map>
#include <memory>
#include <vector>
#include <mutex>
#include <json/json.h>

namespace state {
  class Etat;
};
namespace engine {
  class Action;
  class Commande;
  class Observable;
};
namespace render {
  class IObservateur;
}

#include "state/Etat.h"
#include "Commande.h"
#include "Observable.h"
#include "render/IObservateur.h"
#include "Action.h"

namespace engine {

  /// class Moteur - 
  class Moteur : public engine::Observable, public render::IObservateur {
    // Associations
    // Attributes
  public:
    bool onThread     = false;
  private:
    state::Etat etatActuel;
    std::map<int, std::unique_ptr<Commande>> commandesActuelles;
    bool changementTour;
    bool joueurActif;
    std::vector<Action*> listeActionsJouees;
    mutable std::mutex commands_mutex;
  protected:
    bool enableRecord     = false;
    Json::Value record;
    bool stop     = false;
    // Operations
  public:
    Moteur ();
    ~Moteur ();
    state::Etat& getEtat ();
    void addCommande (int priorite, std::unique_ptr<Commande> ptr_cmd);
    void update ();
    bool verificationFinDeTour ();
    void verificationDebutDeTour ();
    bool getJoueurActif ();
    void updateAction (Action* action);
    void undo (Action* action);
    void addAction (Action* newAction);
    void curseurChanged (state::Etat& etat, render::CurseurEventID& touche, int acteur, int cible, state::Position& position, bool rollback);
    void setEnableRecord (bool val);
    Json::Value getRecord ();
    // Setters and Getters
  };

};

#endif
